import os
from tempfile import mkstemp
from enum import Enum
import pytest

from drycode.java_code_builder import JavaCodeBuilder
from drycode.java_script_code_builder import JavaScriptCodeBuilder
from drycode.python_code_builder import PythonCodeBuilder
from drycode.drycode import DryCode, DryConstantClass, DryEnumClass
from drycode.lang_info import AllLangInfo
from drycode.code_lang import CodeLanguages


class ConstantClass:
    C1 = "AAAA"
    C2 = 55
    C3 = 44 * 10


expected_constant_class_java_code = \
"""// Code generated by DryCode

public class ConstantClass {

    public static final String C1 = "AAAA";
    public static final String C2 = 55;
    public static final String C3 = 440;
};
"""

expected_constant_class_js_code = \
"""# Code generated by DryCode

export const ConstantClass = {
 C1 : 'AAAA',
 C2 : 55,
 C3 : 440,
};
"""

expected_constant_class_python_code = \
"""# Code generated by DryCode

class ConstantClass:
    C1 = "AAAA"
    C2 = 55
    C3 = 440
"""

class EnumClass(Enum):
    JSON = "Json"
    SAVEDMODEL = "Savedmodel"
    SPARKML = "SparkML"
    BINARY = "Binary"
    TEXT = "Text"
    SCIKIT_LEARN_2 = "ScikitLearn_2"
    SCIKIT_LEARN_3 = "ScikitLearn_3"
    H2O_3 = "H2O_3"
    H2O_DRIVERLESS_AI = "H2O_Driverless_AI"
    UNKNOWN = "Unknown"


expected_enum_class_java_code = \
"""// Code generated by DryCode

public enum EnumClass {


    @SerializedName("Binary")
    BINARY ("Binary"),

    @SerializedName("H2O_3")
    H2O_3 ("H2O_3"),

    @SerializedName("H2O_Driverless_AI")
    H2O_DRIVERLESS_AI ("H2O_Driverless_AI"),

    @SerializedName("Json")
    JSON ("Json"),

    @SerializedName("Savedmodel")
    SAVEDMODEL ("Savedmodel"),

    @SerializedName("ScikitLearn_2")
    SCIKITLEARN_2 ("ScikitLearn_2"),

    @SerializedName("ScikitLearn_3")
    SCIKITLEARN_3 ("ScikitLearn_3"),

    @SerializedName("SparkML")
    SPARKML ("SparkML"),

    @SerializedName("Text")
    TEXT ("Text"),

    @SerializedName("Unknown")
    UNKNOWN ("Unknown");


    public static EnumClass fromString(String name) {
        if (name != null) {
            for (EnumClass item : EnumClass.values()) {
                if (name.equalsIgnoreCase(item.name)) {
                    return item;
                }
            }
        }
        return null;
    }

    public static List<EnumClass> fromString(List<String> nameList) {
        List<EnumClass> itemList = new ArrayList<>();

        for (String name : nameList) {
            EnumClass item = fromString(name);
            if (item != null) {
                itemList.add(alertType);
            }
        }
        return itemList;
    }
};
"""


class TestDryCode:

    @classmethod
    def setup_class(cls):
        pass

    @classmethod
    def teardown_class(cls):
        pass

    # @pytest.mark.skip(reason="no way of currently testing this")
    def test_string_def_java(self):
        constants = DryConstantClass().set_from_obj(ConstantClass)
        builder = JavaCodeBuilder().add_time_stamp(False)
        code = builder.generate_constant_class_code(constants)
        assert(code == expected_constant_class_java_code)

    def test_enum_java(self):
        constants = DryEnumClass().set_from_obj(EnumClass)
        builder = JavaCodeBuilder().add_time_stamp(False)
        code = builder.generate_enum_class_code(constants)
        assert(code == expected_enum_class_java_code)

    def test_drycode_java_basic(self):
        dry = DryCode(AllLangInfo.register_all()).add_time_stamp(False)
        code = dry.generate_constant_class_code(ConstantClass, CodeLanguages.JAVA)
        assert(code == expected_constant_class_java_code)

        code = dry.generate_enum_class_code(EnumClass, CodeLanguages.JAVA)
        assert(code == expected_enum_class_java_code)

    def test_string_def_js(self):
        constants = DryConstantClass().set_from_obj(ConstantClass)
        builder = JavaScriptCodeBuilder().add_time_stamp(False)
        code = builder.generate_constant_class_code(constants)
        assert(code == expected_constant_class_js_code)

    def test_drycode_js_basic(self):
        dry = DryCode(AllLangInfo.register_all()).add_time_stamp(False)
        code = dry.generate_constant_class_code(ConstantClass, CodeLanguages.JAVA_SCRIPT)
        assert(code == expected_constant_class_js_code)

    def test_string_def_python(self):
        constants = DryConstantClass().set_from_obj(ConstantClass)
        builder = PythonCodeBuilder().add_time_stamp(False)
        code = builder.generate_constant_class_code(constants)
        assert(code == expected_constant_class_python_code)
